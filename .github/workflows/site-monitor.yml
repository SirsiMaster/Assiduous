name: Site Health Monitor

on:
  schedule:
    # Run every 15 minutes
    - cron: '*/15 * * * *'
  workflow_dispatch: # Allow manual trigger

jobs:
  monitor:
    name: Check Site Health
    runs-on: ubuntu-latest
    
    steps:
      - name: Check Production Site
        id: check-prod
        run: |
          echo "üîç Checking https://assiduousflip.web.app..."
          
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 https://assiduousflip.web.app)
          
          if [ "$RESPONSE" = "200" ]; then
            echo "‚úÖ Production site is UP (HTTP $RESPONSE)"
            echo "status=up" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Production site is DOWN (HTTP $RESPONSE)"
            echo "status=down" >> $GITHUB_OUTPUT
            exit 1
          fi
      
      - name: Check Admin Portal
        if: always()
        id: check-admin
        run: |
          echo "üîç Checking admin portal..."
          
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 https://assiduousflip.web.app/admin/dashboard.html)
          
          if [ "$RESPONSE" = "200" ] || [ "$RESPONSE" = "302" ]; then
            echo "‚úÖ Admin portal is accessible (HTTP $RESPONSE)"
            echo "status=up" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è Admin portal returned HTTP $RESPONSE"
            echo "status=warning" >> $GITHUB_OUTPUT
          fi
      
      - name: Check DEV Environment
        if: always()
        id: check-dev
        run: |
          echo "üîç Checking DEV environment..."
          
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 https://assiduous-dev.web.app)
          
          if [ "$RESPONSE" = "200" ]; then
            echo "‚úÖ DEV environment is UP (HTTP $RESPONSE)"
          else
            echo "‚ö†Ô∏è DEV environment returned HTTP $RESPONSE"
          fi
      
      - name: Check STAGING Environment
        if: always()
        id: check-staging
        run: |
          echo "üîç Checking STAGING environment..."
          
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 https://assiduous-staging.web.app)
          
          if [ "$RESPONSE" = "200" ]; then
            echo "‚úÖ STAGING environment is UP (HTTP $RESPONSE)"
          else
            echo "‚ö†Ô∏è STAGING environment returned HTTP $RESPONSE"
          fi
      
      - name: Test Critical Pages
        if: always()
        id: check-pages
        run: |
          echo "üîç Testing critical pages..."
          
          PAGES=(
            "https://assiduousflip.web.app/"
            "https://assiduousflip.web.app/admin/dashboard.html"
            "https://assiduousflip.web.app/admin/properties.html"
            "https://assiduousflip.web.app/client/"
          )
          
          FAILED=0
          for page in "${PAGES[@]}"; do
            RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 "$page")
            if [ "$RESPONSE" != "200" ] && [ "$RESPONSE" != "302" ]; then
              echo "‚ùå Failed: $page (HTTP $RESPONSE)"
              FAILED=$((FAILED + 1))
            else
              echo "‚úÖ OK: $page"
            fi
          done
          
          if [ $FAILED -gt 0 ]; then
            echo "failed_pages=$FAILED" >> $GITHUB_OUTPUT
            exit 1
          fi
      
      - name: Post Status Summary
        if: always()
        run: |
          echo "## üè• Site Health Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Time:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Status" >> $GITHUB_STEP_SUMMARY
          echo "- Production: ${{ steps.check-prod.outcome == 'success' && '‚úÖ UP' || '‚ùå DOWN' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Admin Portal: ${{ steps.check-admin.outcome == 'success' && '‚úÖ UP' || '‚ö†Ô∏è WARNING' }}" >> $GITHUB_STEP_SUMMARY
          echo "- DEV: ${{ steps.check-dev.outcome == 'success' && '‚úÖ UP' || '‚ö†Ô∏è WARNING' }}" >> $GITHUB_STEP_SUMMARY
          echo "- STAGING: ${{ steps.check-staging.outcome == 'success' && '‚úÖ UP' || '‚ö†Ô∏è WARNING' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Links" >> $GITHUB_STEP_SUMMARY
          echo "- [Production Site](https://assiduousflip.web.app)" >> $GITHUB_STEP_SUMMARY
          echo "- [Admin Dashboard](https://assiduousflip.web.app/admin/dashboard.html)" >> $GITHUB_STEP_SUMMARY
          echo "- [Firebase Console](https://console.firebase.google.com/project/assiduous-prod)" >> $GITHUB_STEP_SUMMARY
      
      # AUTO-FIX: Attempt to redeploy when site is down
      - name: Auto-Fix - Attempt Redeploy
        if: steps.check-prod.outcome == 'failure'
        id: auto-fix
        run: |
          echo "üîß Site is down - attempting automatic redeploy..."
          
          # Install Firebase CLI
          npm install -g firebase-tools
          
          # Attempt to redeploy
          cd firebase-migration-package
          firebase deploy --only hosting --project assiduous-prod --token "${{ secrets.FIREBASE_TOKEN }}" 
          
          # Wait 30 seconds for deployment to propagate
          sleep 30
          
          # Verify fix
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 https://assiduousflip.web.app)
          if [ "$RESPONSE" = "200" ]; then
            echo "‚úÖ AUTO-FIX SUCCESSFUL! Site is back up."
            echo "fix_status=success" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Auto-fix failed. Manual intervention required."
            echo "fix_status=failed" >> $GITHUB_OUTPUT
          fi
      
      # Send email notification when site goes down
      - name: Send Email Notification
        if: steps.check-prod.outcome == 'failure'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: üö® URGENT - Assiduous Production Site Down
          body: |
            The Assiduous production site (https://assiduousflip.web.app) is currently DOWN.
            
            Detection Time: ${{ steps.check-prod.outputs.time }}
            Auto-Fix Status: ${{ steps.auto-fix.outputs.fix_status == 'success' && '‚úÖ FIXED AUTOMATICALLY' || '‚ùå MANUAL FIX REQUIRED' }}
            
            View monitoring details:
            https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            If auto-fix failed, please redeploy manually:
            1. SSH to deployment server
            2. cd firebase-migration-package
            3. Run: firebase deploy --only hosting --project assiduous-prod
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: Assiduous Site Monitor <monitor@assiduousflip.com>
      
      - name: Create or Update Issue
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const isProdDown = '${{ steps.check-prod.outcome }}' === 'failure';
            const wasAutoFixed = '${{ steps.auto-fix.outputs.fix_status }}' === 'success';
            
            // Check if there's already an open issue
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'site-down,automated'
            });
            
            if (isProdDown && !wasAutoFixed) {
              // Site is down and auto-fix failed - create or update issue
              const title = 'üö® Production Site Down Alert';
              const body = `## Site Health Check Failed
              
              **Time:** ${new Date().toISOString()}
              **Workflow Run:** ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}
              
              ### Status
              - Production: ‚ùå DOWN
              - Auto-Fix Attempted: ‚ùå FAILED
              - Manual Intervention: ‚ö†Ô∏è REQUIRED
              
              ### Email Notification
              ‚úÖ Email alert has been sent to configured recipients.
              
              ### Immediate Actions
              1. Check Firebase Console: https://console.firebase.google.com/project/assiduous-prod
              2. Review recent deployments
              3. Check GitHub Actions: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions
              
              ### Manual Fix Commands
              \`\`\`bash
              cd firebase-migration-package
              firebase deploy --only hosting --project assiduous-prod
              \`\`\`
              
              **This issue was automatically created by the site monitor after auto-fix failed.**`;
              
              if (issues.data.length === 0) {
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: title,
                  body: body,
                  labels: ['site-down', 'automated', 'urgent', 'auto-fix-failed']
                });
              }
            } else if (!isProdDown || wasAutoFixed) {
              // Site is up (either never went down or was auto-fixed) - close any open issues
              for (const issue of issues.data) {
                let closeComment = '‚úÖ Site is back online!\n\n';
                
                if (wasAutoFixed) {
                  closeComment += 'üîß **Auto-Fix Status:** The site was automatically redeployed and is now working.\n';
                }
                
                closeComment += `**Confirmed at:** ${new Date().toISOString()}\n`;
                closeComment += `**Monitoring Run:** ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}\n\n`;
                closeComment += 'This issue has been automatically closed by the site monitor.';
                
                // Add closing comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: closeComment
                });
                
                // Close the issue
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed'
                });
                
                console.log(`Closed issue #${issue.number}`);
              }
            }
