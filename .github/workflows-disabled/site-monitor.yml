name: Site Health Monitor

on:
  schedule:
    # Run every 15 minutes
    - cron: '*/15 * * * *'
  workflow_dispatch: # Allow manual trigger

jobs:
  monitor:
    name: Check Site Health
    runs-on: ubuntu-latest
    
    steps:
      - name: Check Production Site
        id: check-prod
        run: |
          echo "🔍 Checking https://assiduousflip.web.app..."
          
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 https://assiduousflip.web.app)
          
          if [ "$RESPONSE" = "200" ]; then
            echo "✅ Production site is UP (HTTP $RESPONSE)"
            echo "status=up" >> $GITHUB_OUTPUT
          else
            echo "❌ Production site is DOWN (HTTP $RESPONSE)"
            echo "status=down" >> $GITHUB_OUTPUT
            exit 1
          fi
      
      - name: Check Admin Portal
        if: always()
        id: check-admin
        run: |
          echo "🔍 Checking admin portal..."
          
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 https://assiduousflip.web.app/admin/dashboard.html)
          
          if [ "$RESPONSE" = "200" ] || [ "$RESPONSE" = "302" ]; then
            echo "✅ Admin portal is accessible (HTTP $RESPONSE)"
            echo "status=up" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Admin portal returned HTTP $RESPONSE"
            echo "status=warning" >> $GITHUB_OUTPUT
          fi
      
      - name: Check DEV Environment
        if: always()
        id: check-dev
        run: |
          echo "🔍 Checking DEV environment..."
          
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 https://assiduous-dev.web.app)
          
          if [ "$RESPONSE" = "200" ]; then
            echo "✅ DEV environment is UP (HTTP $RESPONSE)"
          else
            echo "⚠️ DEV environment returned HTTP $RESPONSE"
          fi
      
      - name: Check STAGING Environment
        if: always()
        id: check-staging
        run: |
          echo "🔍 Checking STAGING environment..."
          
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 https://assiduous-staging.web.app)
          
          if [ "$RESPONSE" = "200" ]; then
            echo "✅ STAGING environment is UP (HTTP $RESPONSE)"
          else
            echo "⚠️ STAGING environment returned HTTP $RESPONSE"
          fi
      
      - name: Test Critical Pages
        if: always()
        id: check-pages
        run: |
          echo "🔍 Testing critical pages..."
          
          PAGES=(
            "https://assiduousflip.web.app/"
            "https://assiduousflip.web.app/admin/dashboard.html"
            "https://assiduousflip.web.app/admin/properties.html"
            "https://assiduousflip.web.app/client/"
          )
          
          FAILED=0
          for page in "${PAGES[@]}"; do
            RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 "$page")
            if [ "$RESPONSE" != "200" ] && [ "$RESPONSE" != "302" ]; then
              echo "❌ Failed: $page (HTTP $RESPONSE)"
              FAILED=$((FAILED + 1))
            else
              echo "✅ OK: $page"
            fi
          done
          
          if [ $FAILED -gt 0 ]; then
            echo "failed_pages=$FAILED" >> $GITHUB_OUTPUT
            exit 1
          fi
      
      - name: Post Status Summary
        if: always()
        run: |
          echo "## 🏥 Site Health Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Time:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Status" >> $GITHUB_STEP_SUMMARY
          echo "- Production: ${{ steps.check-prod.outcome == 'success' && '✅ UP' || '❌ DOWN' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Admin Portal: ${{ steps.check-admin.outcome == 'success' && '✅ UP' || '⚠️ WARNING' }}" >> $GITHUB_STEP_SUMMARY
          echo "- DEV: ${{ steps.check-dev.outcome == 'success' && '✅ UP' || '⚠️ WARNING' }}" >> $GITHUB_STEP_SUMMARY
          echo "- STAGING: ${{ steps.check-staging.outcome == 'success' && '✅ UP' || '⚠️ WARNING' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Links" >> $GITHUB_STEP_SUMMARY
          echo "- [Production Site](https://assiduousflip.web.app)" >> $GITHUB_STEP_SUMMARY
          echo "- [Admin Dashboard](https://assiduousflip.web.app/admin/dashboard.html)" >> $GITHUB_STEP_SUMMARY
          echo "- [Firebase Console](https://console.firebase.google.com/project/assiduous-prod)" >> $GITHUB_STEP_SUMMARY
      
      # AUTO-FIX: Attempt to redeploy when site is down
      - name: Auto-Fix - Attempt Redeploy with Retry
        if: steps.check-prod.outcome == 'failure'
        id: auto-fix
        run: |
          echo "🔧 Site is down - initiating automatic recovery protocol..."
          echo "⏰ Time: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          
          # Install Firebase CLI
          echo "📦 Installing Firebase CLI..."
          npm install -g firebase-tools
          
          # Maximum number of redeploy attempts
          MAX_ATTEMPTS=3
          ATTEMPT=0
          SUCCESS=false
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ] && [ "$SUCCESS" = "false" ]; do
            ATTEMPT=$((ATTEMPT + 1))
            echo ""
            echo "🚀 Deployment attempt $ATTEMPT of $MAX_ATTEMPTS..."
            
            # Navigate to deployment directory
            cd $GITHUB_WORKSPACE/firebase-migration-package
            
            # Attempt to redeploy
            echo "📤 Deploying to Firebase Hosting..."
            if firebase deploy --only hosting:production --project assiduous-prod --token "${{ secrets.FIREBASE_TOKEN }}" 2>&1; then
              echo "✅ Deployment command executed successfully"
              
              # Test site liveness with multiple checks
              echo "🔍 Testing site liveness (waiting for HTTP 200)..."
              
              # Wait up to 2 minutes for site to come online, checking every 10 seconds
              for i in {1..12}; do
                sleep 10
                echo -n "  Check $i/12: "
                
                RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 https://assiduousflip.web.app)
                echo "HTTP $RESPONSE"
                
                if [ "$RESPONSE" = "200" ]; then
                  echo "🎉 Site is LIVE! HTTP 200 received."
                  SUCCESS=true
                  break
                fi
              done
              
              if [ "$SUCCESS" = "true" ]; then
                break
              else
                echo "⚠️ Site not responding with HTTP 200 after deployment"
              fi
            else
              echo "❌ Deployment command failed"
            fi
            
            if [ $ATTEMPT -lt $MAX_ATTEMPTS ] && [ "$SUCCESS" = "false" ]; then
              echo "⏳ Waiting 30 seconds before retry..."
              sleep 30
            fi
          done
          
          # Final status
          if [ "$SUCCESS" = "true" ]; then
            echo ""
            echo "═══════════════════════════════════════"
            echo "✅ AUTO-FIX SUCCESSFUL!"
            echo "🌐 Site: https://assiduousflip.web.app"
            echo "📊 Status: HTTP 200 - FULLY OPERATIONAL"
            echo "🕒 Recovery Time: ~$((ATTEMPT * 150)) seconds"
            echo "═══════════════════════════════════════"
            echo "fix_status=success" >> $GITHUB_OUTPUT
            echo "attempts=$ATTEMPT" >> $GITHUB_OUTPUT
          else
            echo ""
            echo "═══════════════════════════════════════"
            echo "❌ AUTO-FIX FAILED AFTER $MAX_ATTEMPTS ATTEMPTS"
            echo "📱 Manual intervention required"
            echo "📧 Email notification will be sent"
            echo "🎫 GitHub issue will be created"
            echo "═══════════════════════════════════════"
            echo "fix_status=failed" >> $GITHUB_OUTPUT
            echo "attempts=$MAX_ATTEMPTS" >> $GITHUB_OUTPUT
          fi
      
      # Log recovery status for notifications
      - name: Log Recovery Status
        if: steps.check-prod.outcome == 'failure'
        run: |
          echo "## 🔔 SITE RECOVERY REPORT" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.auto-fix.outputs.fix_status }}" = "success" ]; then
            echo "### ✅ AUTO-RECOVERY SUCCESSFUL" >> $GITHUB_STEP_SUMMARY
            echo "The site has been automatically recovered and is now operational." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- **Site URL:** https://assiduousflip.web.app" >> $GITHUB_STEP_SUMMARY
            echo "- **Status:** HTTP 200 - FULLY OPERATIONAL" >> $GITHUB_STEP_SUMMARY
            echo "- **Recovery Time:** ~$((${{ steps.auto-fix.outputs.attempts }} * 150)) seconds" >> $GITHUB_STEP_SUMMARY
            echo "- **Deployment Attempts:** ${{ steps.auto-fix.outputs.attempts }}/3" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ AUTO-RECOVERY FAILED - MANUAL INTERVENTION REQUIRED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **The automatic recovery failed after 3 attempts. The site requires manual intervention.**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "#### Manual Fix Instructions:" >> $GITHUB_STEP_SUMMARY
            echo "1. Access [Firebase Console](https://console.firebase.google.com/project/assiduous-prod)" >> $GITHUB_STEP_SUMMARY
            echo "2. Run manual deployment:" >> $GITHUB_STEP_SUMMARY
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            echo "cd firebase-migration-package" >> $GITHUB_STEP_SUMMARY
            echo "firebase deploy --only hosting --project assiduous-prod" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "3. Verify site returns HTTP 200:" >> $GITHUB_STEP_SUMMARY
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            echo "curl -I https://assiduousflip.web.app" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*GitHub will send notifications about this workflow to repository watchers.*" >> $GITHUB_STEP_SUMMARY
      
      - name: Create or Update Issue
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const isProdDown = '${{ steps.check-prod.outcome }}' === 'failure';
            const wasAutoFixed = '${{ steps.auto-fix.outputs.fix_status }}' === 'success';
            
            // Check if there's already an open issue
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'site-down,automated'
            });
            
            if (isProdDown && !wasAutoFixed) {
              // Site is down and auto-fix failed - create or update issue
              const title = '🚨 Production Site Down Alert';
              const body = `## 🎯 Automatic Recovery Failed - Manual Intervention Required
              
              **Detection Time:** ${new Date().toISOString()}
              **Workflow Run:** ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}
              
              ### 📊 Recovery Attempt Summary
              - **Site Status:** ❌ DOWN (Not returning HTTP 200)
              - **Auto-Recovery:** Attempted 3 times - ALL FAILED
              - **Recovery Protocol:** Firebase redeploy with liveness testing
              - **Manual Fix:** ⚠️ REQUIRED IMMEDIATELY
              
              ### 🔧 What the monitor tried:
              1. Detected site was down (not returning HTTP 200)
              2. Automatically attempted to redeploy via Firebase CLI
              3. Tested site liveness after each deployment (12 checks over 2 minutes)
              4. Retried deployment 3 times with 30-second intervals
              5. All recovery attempts failed to restore HTTP 200 status
              
              ### 🚑 Immediate Actions Required
              1. **Check Firebase Console:** https://console.firebase.google.com/project/assiduous-prod
              2. **Review deployment logs in this workflow run**
              3. **Manual deployment commands:**
              \`\`\`bash
              # Navigate to deployment directory
              cd firebase-migration-package
              
              # Deploy to production
              firebase deploy --only hosting --project assiduous-prod
              
              # Test site is live (should return HTTP 200)
              curl -I https://assiduousflip.web.app
              \`\`\`
              
              ### 🔔 GitHub Notifications
              Repository watchers will receive notifications about this issue.
              
              **This issue was automatically created after 3 failed auto-recovery attempts.**`;
              
              if (issues.data.length === 0) {
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: title,
                  body: body,
                  labels: ['site-down', 'automated', 'urgent', 'auto-fix-failed']
                });
              }
            } else if (!isProdDown || wasAutoFixed) {
              // Site is up (either never went down or was auto-fixed) - close any open issues
              for (const issue of issues.data) {
                let closeComment = '✅ Site is back online!\n\n';
                
                if (wasAutoFixed) {
                  closeComment += '🔧 **Auto-Fix Status:** The site was automatically redeployed and is now working.\n';
                }
                
                closeComment += `**Confirmed at:** ${new Date().toISOString()}\n`;
                closeComment += `**Monitoring Run:** ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}\n\n`;
                closeComment += 'This issue has been automatically closed by the site monitor.';
                
                // Add closing comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: closeComment
                });
                
                // Close the issue
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed'
                });
                
                console.log(`Closed issue #${issue.number}`);
              }
            }
