rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Allow authenticated users to read all files
    match /{allPaths=**} {
      allow read: if request.auth != null;
    }
    
    // User profile images
    match /users/{userId}/profile/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId
        && request.resource.size < 5 * 1024 * 1024 // Max 5MB
        && request.resource.contentType.matches('image/.*');
    }
    
    // Property images
    match /properties/{propertyId}/images/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null 
        && request.auth.token.role in ['agent', 'admin']
        && request.resource.size < 10 * 1024 * 1024 // Max 10MB
        && request.resource.contentType.matches('image/.*');
    }
    
    // Documents (contracts, agreements, etc.)
    match /documents/{documentId}/{fileName} {
      allow read: if request.auth != null 
        && (request.auth.token.role == 'admin' 
          || resource.metadata.ownerId == request.auth.uid
          || resource.metadata.sharedWith == request.auth.uid);
      allow write: if request.auth != null
        && request.auth.token.role in ['agent', 'admin']
        && request.resource.size < 25 * 1024 * 1024 // Max 25MB
        && request.resource.contentType.matches('application/pdf');
    }
    
    // Public assets (logos, banners, etc.)
    match /public/{fileName} {
      allow read: if true; // Public access
      allow write: if request.auth != null && request.auth.token.role == 'admin';
    }
    
    // Temporary uploads (for processing)
    match /temp/{userId}/{fileName} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Note: Set up lifecycle rules to auto-delete after 24 hours
    }
  }
}
