rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for Assiduous roles
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }
    
    function isAgent() {
      return isAuthenticated() && getUserRole() == 'agent';
    }
    
    function isAdmin() {
      return isAuthenticated() && getUserRole() == 'admin';
    }
    
    function isClient() {
      return isAuthenticated() && getUserRole() == 'client';
    }
    
    // Check if user is a signer for a specific session
    function isSessionSigner(sessionData) {
      return isAuthenticated() && 
        request.auth.token.email in sessionData.signers[*].email;
    }
    
    // Check if user is part of a transaction
    function isTransactionParticipant(transactionId) {
      let transaction = get(/databases/$(database)/documents/transactions/$(transactionId)).data;
      return isAuthenticated() && (
        request.auth.uid == transaction.buyerId ||
        request.auth.uid == transaction.sellerId ||
        request.auth.uid == transaction.agentId
      );
    }
    
    // Verification docs: Enhanced access for Assiduous roles
    match /verifications/{verificationId} {
      // Buyers can read their own, agents can read assigned, admins can read all
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.buyerId ||
        (isAgent() && request.auth.uid == resource.data.agentId) ||
        isAdmin()
      );
      allow write: if false; // server-only via Functions
    }

    // Webhook logs: server-only
    match /webhook_logs/{doc} {
      allow read, write: if false;
    }

    // Idempotency mapping: server-only
    match /idempotency/{doc} {
      allow read, write: if false;
    }
    
    // ===== OpenSign Integration Collections =====
    
    // Signing Templates - Document templates for contracts
    match /signingTemplates/{templateId} {
      // All authenticated users can read templates
      allow read: if isAuthenticated();
      
      // Only admins and agents can create/update templates
      allow create, update: if isAgent() || isAdmin();
      
      // Only admins can delete templates
      allow delete: if isAdmin();
    }
    
    // Signing Sessions - Active document signing processes
    match /signingSessions/{sessionId} {
      // Users can read sessions where they are participants
      allow read: if isAuthenticated() && (
        // User is a signer
        isSessionSigner(resource.data) ||
        // User is part of the related transaction
        isTransactionParticipant(resource.data.transactionId) ||
        // User is an agent or admin
        isAgent() || isAdmin()
      );
      
      // Only Cloud Functions service account can write
      // This ensures all signing operations go through proper validation
      allow write: if false; // Managed by Cloud Functions only
    }
    
    // Notifications - System notifications including signing alerts
    match /notifications/{notificationId} {
      // Users can read their own notifications
      allow read: if isAuthenticated() && (
        request.auth.token.email == resource.data.recipientEmail ||
        request.auth.uid == resource.data.recipientId ||
        isAdmin()
      );
      
      // Only Cloud Functions can create notifications
      allow create: if false; // Managed by Cloud Functions
      
      // Users can update their own notifications (mark as read)
      allow update: if isAuthenticated() && 
        request.auth.token.email == resource.data.recipientEmail &&
        // Only allow updating 'read' field
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read', 'readAt']);
      
      // No direct deletes allowed
      allow delete: if false;
    }
    
    // Transactions - Updated to include signing session references
    match /transactions/{transactionId} {
      // Existing read rules
      allow read: if isAuthenticated() && (
        isTransactionParticipant(transactionId) ||
        isAgent() || isAdmin()
      );
      
      // Existing write rules (keep as is)
      allow create: if isAuthenticated() && (isAgent() || isAdmin());
      
      allow update: if isAuthenticated() && (
        isTransactionParticipant(transactionId) ||
        isAgent() || isAdmin()
      );
      
      allow delete: if isAdmin();
    }
    
    // Users collection - Existing rules
    match /users/{userId} {
      // Only authenticated users can read their own data
      allow read: if isAuthenticated() && (
        request.auth.uid == userId ||
        isAgent() || isAdmin()
      );
      
      // Only admins can write user data
      allow write: if isAdmin();
    }
    
    // Properties collection - Existing rules
    match /properties/{propertyId} {
      // Anyone can read public property data
      allow read: if true;
      
      // Only verified agents can create/update
      allow create, update: if isAgent() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.verified == true;
      
      allow delete: if isAdmin();
    }
    
    // Messages collection - Existing rules
    match /messages/{messageId} {
      // Users can read messages they're part of
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.senderId ||
        request.auth.uid == resource.data.recipientId ||
        isAdmin()
      );
      
      // Users can create messages
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.senderId;
      
      // No updates or deletes allowed
      allow update, delete: if false;
    }
  }
}

// Firebase Storage Rules for contract documents
service firebase.storage {
  match /b/{bucket}/o {
    // Default deny all
    match /{allPaths=**} {
      allow read, write: if false;
    }
    
    // Contract documents storage
    match /contracts/{transactionId}/{sessionId}/{fileName} {
      // Only allow reading if user is:
      // 1. Part of the transaction
      // 2. A signer in the session
      // 3. An agent or admin
      allow read: if request.auth != null && (
        // Check if user is part of transaction (would need custom claim or metadata)
        request.auth.uid in resource.metadata.authorizedUsers ||
        request.auth.token.email in resource.metadata.signerEmails ||
        request.auth.token.role == 'agent' ||
        request.auth.token.role == 'admin'
      );
      
      // Only Cloud Functions can write contract documents
      allow write: if false; // Managed by Cloud Functions
    }
    
    // Template documents storage
    match /templates/{templateId}/{fileName} {
      // All authenticated users can read templates
      allow read: if request.auth != null;
      
      // Only agents and admins can upload templates
      allow write: if request.auth != null && (
        request.auth.token.role == 'agent' ||
        request.auth.token.role == 'admin'
      );
    }
    
    // Temporary upload area for documents pending signature
    match /pending/{userId}/{documentId} {
      // Users can read and write their own pending documents
      allow read, write: if request.auth != null && 
        request.auth.uid == userId;
    }
  }
}
