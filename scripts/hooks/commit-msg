#!/bin/bash

# Assiduous Commit Message Validation Hook
# Enforces Conventional Commits specification
# https://www.conventionalcommits.org/

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Get the commit message
commit_message_file=$1
commit_message=$(cat "$commit_message_file")

# Skip validation for merge commits
if [ -z "$(git rev-parse -q --verify MERGE_HEAD)" ]; then
    :
else
    exit 0
fi

# Define the conventional commit pattern
# Format: <type>(<scope>): <subject>
# or: <type>: <subject>
conventional_pattern="^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\([a-z0-9-]+\))?: .{1,50}$"

# Check if this is a revert commit (git revert creates these)
revert_pattern="^Revert \".*\"$"

# Check if this is a merge commit message
merge_pattern="^Merge .+$"

# Get the first line of the commit message
first_line=$(echo "$commit_message" | head -n1)

# Function to print error message and exit
print_error() {
    echo -e "${RED}❌ Commit message validation failed!${NC}"
    echo ""
    echo -e "${YELLOW}Your commit message:${NC}"
    echo "$first_line"
    echo ""
    echo -e "${YELLOW}Expected format:${NC}"
    echo "<type>(<scope>): <subject>"
    echo "or"
    echo "<type>: <subject>"
    echo ""
    echo -e "${YELLOW}Valid types:${NC}"
    echo "  feat     - New feature"
    echo "  fix      - Bug fix"
    echo "  docs     - Documentation changes"
    echo "  style    - Code style changes (formatting, etc.)"
    echo "  refactor - Code refactoring"
    echo "  test     - Adding or updating tests"
    echo "  chore    - Maintenance tasks"
    echo "  perf     - Performance improvements"
    echo "  ci       - CI/CD changes"
    echo "  build    - Build system or dependency changes"
    echo "  revert   - Reverting a previous commit"
    echo ""
    echo -e "${YELLOW}Examples:${NC}"
    echo "  feat: add property search API"
    echo "  fix(auth): resolve token expiration issue"
    echo "  docs(api): update endpoint documentation"
    echo ""
    echo -e "${YELLOW}Tips:${NC}"
    echo "  - Subject should be no more than 50 characters"
    echo "  - Use imperative mood (\"add\" not \"added\")"
    echo "  - Don't end the subject with a period"
    echo "  - Scope is optional but recommended"
    echo ""
    echo -e "${RED}Commit aborted. Please fix your commit message and try again.${NC}"
    exit 1
}

# Validate the commit message
if [[ $first_line =~ $conventional_pattern ]] || [[ $first_line =~ $revert_pattern ]] || [[ $first_line =~ $merge_pattern ]]; then
    # Additional validation for subject line length
    subject=$(echo "$first_line" | sed -E 's/^[a-z]+(\([a-z0-9-]+\))?: //')
    
    # Check if subject starts with lowercase (should be capitalized)
    first_char=$(echo "$subject" | cut -c1)
    if [[ "$first_char" =~ [a-z] ]]; then
        echo -e "${YELLOW}⚠️  Warning: Subject should start with a capital letter${NC}"
        echo "  Current: $subject"
        echo "  Suggested: $(echo "$subject" | sed 's/^./\U&/')"
    fi
    
    # Check if subject ends with a period
    if [[ "$subject" =~ \.$ ]]; then
        echo -e "${YELLOW}⚠️  Warning: Subject should not end with a period${NC}"
        echo "  Current: $subject"
        echo "  Suggested: ${subject%.}"
    fi
    
    echo -e "${GREEN}✅ Commit message validation passed!${NC}"
    exit 0
else
    print_error
fi
